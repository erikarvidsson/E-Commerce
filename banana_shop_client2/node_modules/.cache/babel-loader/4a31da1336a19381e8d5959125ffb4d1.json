{"ast":null,"code":"import _classCallCheck from \"/Users/e/Documents/skola/C#/Newwebshop/banana_shop_client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/e/Documents/skola/C#/Newwebshop/banana_shop_client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/e/Documents/skola/C#/Newwebshop/banana_shop_client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/e/Documents/skola/C#/Newwebshop/banana_shop_client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/e/Documents/skola/C#/Newwebshop/banana_shop_client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/e/Documents/skola/C#/Newwebshop/banana_shop_client/src/components/Products/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar Products =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Products, _Component);\n\n  function Products() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Products);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Products)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      products: []\n    };\n\n    _this.fetchApi = function () {\n      var api = 'http://localhost:28071/api/items';\n      fetch(api).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        _this.setState({\n          products: data\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Products, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchApi();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          users = _this$state.users,\n          error = _this$state.error;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"Random User\"), \"// Display a message if we encounter an error\", error ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, error.message) : null, \"// Here's our data check\", !isLoading ? products.map(function (user) {\n        var username = user.username,\n            name = user.name,\n            email = user.email;\n        return React.createElement(\"div\", {\n          key: username,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, \"Name: \", name), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \"Email Address: \", email), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }));\n      }) // If there is a delay in data, let's let the user know it's loading\n      : React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Loading...\"));\n    }\n  }]);\n\n  return Products;\n}(Component);\n\nexport default Products; // class Products extends Component {\n//   constructor () {\n//     super();\n//     this.state = {\n//       name: [],\n//       price: [],\n//       description: [],\n//     };\n//   }\n//\n//   componentDidMount(){\n//\n//     fetch('http://localhost:28071/api/items')\n//     .then(results => {\n//       return results.json();\n//     }).then(data => {\n//       let name = data.results.map((name) => {\n//         <div>\n//           <h1>name={name} </h1>\n//         </div>\n//\n//     })\n//     this.setState({name: name});\n//   })\n//\n// }\n//\n// render() {\n//\n//     console.log(\"state\", this.state.name);\n//     return(\n//       <div></div>\n//     )\n// }\n//\n//\n//\n// }\n// export default Products;","map":{"version":3,"sources":["/Users/e/Documents/skola/C#/Newwebshop/banana_shop_client/src/components/Products/index.js"],"names":["React","Component","PropTypes","Products","state","products","fetchApi","api","fetch","then","res","json","data","setState","isLoading","users","error","message","map","user","username","name","email"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;IAEMC,Q;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACJC,MAAAA,QAAQ,EAAE;AADN,K;;UAQNC,Q,GAAW,YAAM;AACf,UAAMC,GAAG,GAAG,kCAAZ;AAEAC,MAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACM,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OADT,EAECF,IAFD,CAEM,UAAAG,IAAI,EAAG;AACX,cAAKC,QAAL,CAAc;AACZR,UAAAA,QAAQ,EAAEO;AADE,SAAd;AAGD,OAND;AAOD,K;;;;;;;wCAdmB;AAClB,WAAKN,QAAL;AACD;;;6BAeQ;AAAA,wBAC6B,KAAKF,KADlC;AAAA,UACCU,SADD,eACCA,SADD;AAAA,UACYC,KADZ,eACYA,KADZ;AAAA,UACmBC,KADnB,eACmBA,KADnB;AAEP,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,mDAGGA,KAAK,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,KAAK,CAACC,OAAV,CAAH,GAA4B,IAHpC,8BAKG,CAACH,SAAD,GACCT,QAAQ,CAACa,GAAT,CAAa,UAAAC,IAAI,EAAI;AAAA,YACXC,QADW,GACeD,IADf,CACXC,QADW;AAAA,YACDC,IADC,GACeF,IADf,CACDE,IADC;AAAA,YACKC,KADL,GACeH,IADf,CACKG,KADL;AAEnB,eACE;AAAK,UAAA,GAAG,EAAEF,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAUC,IAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAmBC,KAAnB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,CADF;AAOD,OATD,CADD,CAWD;AAXC,QAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlBJ,CADF;AAuBD;;;;EA/CkBrB,S;;AAkDvB,eAAeE,QAAf,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nclass Products extends Component {\n  state = {\n      products: []\n    }\n\n    componentDidMount() {\n      this.fetchApi();\n    }\n\n    fetchApi = () => {\n      const api = 'http://localhost:28071/api/items';\n\n      fetch(api)\n      .then(res => res.json())\n      .then(data =>{\n        this.setState({\n          products: data\n        })\n      })\n    }\n\n\n    render() {\n      const { isLoading, users, error } = this.state;\n      return (\n        <React.Fragment>\n          <h1>Random User</h1>\n          // Display a message if we encounter an error\n          {error ? <p>{error.message}</p> : null}\n          // Here's our data check\n          {!isLoading ? (\n            products.map(user => {\n              const { username, name, email } = user;\n              return (\n                <div key={username}>\n                  <p>Name: {name}</p>\n                  <p>Email Address: {email}</p>\n                  <hr />\n                </div>\n              );\n            })\n          // If there is a delay in data, let's let the user know it's loading\n          ) : (\n            <h3>Loading...</h3>\n          )}\n        </React.Fragment>\n      );\n    }\n}\n\nexport default Products;\n\n\n\n// class Products extends Component {\n//   constructor () {\n//     super();\n//     this.state = {\n//       name: [],\n//       price: [],\n//       description: [],\n//     };\n//   }\n//\n//   componentDidMount(){\n//\n//     fetch('http://localhost:28071/api/items')\n//     .then(results => {\n//       return results.json();\n//     }).then(data => {\n//       let name = data.results.map((name) => {\n//         <div>\n//           <h1>name={name} </h1>\n//         </div>\n//\n//     })\n//     this.setState({name: name});\n//   })\n//\n// }\n//\n// render() {\n//\n//     console.log(\"state\", this.state.name);\n//     return(\n//       <div></div>\n//     )\n// }\n//\n//\n//\n// }\n// export default Products;\n"]},"metadata":{},"sourceType":"module"}